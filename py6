Aim: Program based on Exception handling
Code:
def divide_numbers():
    try:
        numerator = int(input("Enter the numerator:"))
        denominator = int(input("Enter the denominator:"))
        result = numerator/denominator
        print(f"Result:{result}")
    except ZeroDivisionError:
        print("Error:Cannot divide by zero.")
    except ValueError:
        print("Error:Please enter  valid numbers.")
    except Exception as e:        print(f"An unexcepted error occurred:{e}")
    finally:
        print("The block  always executes,regardless of whether an exception occurred or not.")
divide_numbers()
        
Output:

2.Write a  program to handle value error by using try and except 

Code:
try:
    numbers = int(input("Enter a number:"))
    print(f"You entered:{numbers}")
except ValueError:
    print("Error: Please enter a valid integer.")
Output:
3.Multiple Exceptions in Python
Code:
try:
    value = float(input("Enter a number: "))
    res = 10/value
    print(f"Result: {res}")
except ValueError:
    print("Error: Please enter a valid number.")
except ZeroDivisionError:
    print("Error: Cannot divide by zero.")
  
Output:
 

4.Write a python program for raising custom Exception

Code:
def calculate_square_root(number):
    if number <0:
        raise ValueError("Cannot calculate square root of a negative number:")
    return number**0.5
try:
    result = calculate_square_root(float(input("Enter a number:")))
    print(f"Square root:{result}")
except ValueError as ve:
    print(f"Error:{ve}")
    
Output:
5.Using else with try and except.

Code:
try:
    age = int(input("Enter your age:"))
except ValueError:
    print("Invalid input.Please enter a valid number.")
else:
    if age>=18:
        print("You are eligible to vote.")
    else:
        print("Sorry,you are not eligible to vote yet.")
 
Output:
