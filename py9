Aim:Program based on Big Data libraries:NumPy, Pandas, Matplotlib

1.Numpy:
In this example, we are creating a two-dimensional array that has the rank of 2 as. it has 2 axes. The first axis(dimension) is of length 2, i.e., the number of rows, and the second axis(dimension) is of length 3 i.e., the number of columns. The overall shape of the array can be represented as (2, 3).

Code:
import numpy as np 
# Creating array object 
arr = np.array([[ 1, 2, 3],[ 4, 2, 5]]) 
# Printing type of arr object 
print("Array is of type:",type(arr)) 
# Printing array dimensions (axes) 
print("No. of dimensions:",arr.ndim) 
# Printing shape of array 
print("Shape of array:", arr.shape) 
# Printing size (total number of elements) of array 
print("Size of array:", arr.size) 
# Printing type of elements in array 
print("Array stores elements of type:",arr.dtype) 

Output:
 
2. You can create an array from a regular Python list or tuple using the array()
Function. The type of the resulting array is deduced from the type of the elements
in the sequences.

Code:
import numpy as np 
# Creating array from list with type float 
a = np.array([[1, 2, 4],[5, 8, 7]], dtype = 'float') 
print ("Array created using passed list:\n", a) 
# Creating array from tuple 
b = np.array((1 , 3, 2)) 
print ("\nArray created using passed tuple:\n", b)

Output:

3.Often, the element is of an array is originally unknown, but its size is known.
Hence, NumPy offers several functions to create arrays with initial placeholder content. These minimize the necessity of growing arrays, an expensive operation. For example: np.zeros, np.ones, np.full, np.empty, etc.
To create sequences of numbers, NumPy provides a function analogous to the range that returns arrays instead of lists.

Code:
import numpy as np
# Creating a 3X4 array with all zeros 
c = np.zeros((3, 4)) 
print ("An array initialized with all zeros:\n", c) 
# Create a constant value array of complex type 
d = np.full((3, 3), 6, dtype = 'complex') 
print ("An array initialized with all 6s." "Array type is complex:\n", d) 
# Create an array with random values 
e = np.random.random((2, 2)) 
print ("A random array:\n", e)

Output:

4.arange: This function returns evenly spaced values within a given interval. Step size is specified.

Code:
import numpy as np
# Create a sequence of integers 
# from 0 to 30 with steps of 5 
f = np.arange(0, 30, 5) 
print ("A sequential array with steps of 5:\n", f)

Output:
 
5. linspace: It returns evenly spaced values within a given interval.

Code:
import numpy as np
# Create a sequence of 10 values in range 0 to 5 
g = np.linspace(0, 5, 10) 
print ("A sequential array with 10 values between"

Output:
 
6.Reshaping array:
 We can use reshape method to reshape an array. Consider an array with shape (a1, a2, a3, &#x2026, aN). We can reshape and convert it into another array with shape (b1, b2, b3, &#x2026, bM). The only required condition is a1 x a2 x a3 &#x2026 x aN = b1 x b2 x b3 &#x2026 x bM. (i.e. the original size of the array remains unchanged.)# Reshaping 3X4 array to 2X2X3 array 

Code:
import numpy as np
arr = np.array([[1, 2, 3, 4],[5, 2, 4, 2],[1, 2, 0, 1]]) 
newarr = arr.reshape(2, 2, 3) 
print ("Original array:\n", arr) 
print("---------------") 
print ("Reshaped array:\n", newarr)

Output:

7. Flatten array: We can use flatten method to get a copy of the array collapsed into one dimension. It accepts order argument.
Code:
import numpy as np
# Flatten array 
arr = np.array([[1, 2, 3], [4, 5, 6]]) 
flat_arr = arr.flatten() 
print ("Original array:\n", arr) 
print ("Fattened array:\n", flat_arr)

Output:

8.Operations on a single NumPy array
We can use overloaded arithmetic operators to do element-wise operations on the array to create a new array. In the case of +=, -=, *= operators, the existing array is modified.

Code:
# Python program to demonstrate 
# basic operations on single array 
import numpy as np 
a = np.array([1, 2, 5, 3]) 
# add 1 to every element 
print ("Adding 1 to every element:", a+1) 
# subtract 3 from each element 
print ("Subtracting 3 from each element:", a-3) 
# multiply each element by 10 
print ("Multiplying each element by 10:", a*10) 
# square each element 
print ("Squaring each element:", a**2) 
# modify existing array 
a *= 2
print ("Doubled each element of original array:", a) 
# transpose of array 
a = np.array([[1, 2, 3], [3, 4, 5], [9, 6, 0]]) 
print ("\nOriginal array:\n", a) 
print ("Transpose of array:\n", a.T) 
Output:

Pandas:
1:In the real world, a Pandas Series will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, or an Excel file. Pandas Series can be created from lists, dictionaries, and from scalar values, etc.

Example:

Code:
import pandas as pd 
import numpy as np 
#Creating empty series 
ser = pd.Series() 
print("Pandas Series:", ser) 
#simple array 
data = np.array(['g', 'e', 'e', 'k', 's']) 
ser = pd.Series(data) 
print("Pandas Series:\n", ser)

Output:

2.In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, or an Excel file. Pandas DataFrame can be created from lists, dictionaries, and from a list of dictionaries, etc.

Code:
import pandas as pd 
# Calling DataFrame constructor 
df = pd.DataFrame() 
print(df) 
# list of strings 
lst = ['Geeks', 'For', 'Geeks', 'is', 'portal', 'for', 'Geeks'] 
# Calling DataFrame constructor on list 
df = pd.DataFrame(lst) 
print(df)

Output:

Matplotlib
1.Imagine you have a dataset representing the sales .figure of a product for four consecutive months.The given Python code utilizes the matplotlib.pyplot and numpy libraries to create a plot. Based on this code and the assumption that the array [1,2,3,4] corresponding to the monthly sales daa,address the following practical aspect.

Code:
import matplotlib.pyplot as plt
import numpy as np
plt.plot(np.array([1,2,3,4]))
plt.show()

Output:

2.Line Graph

Code:
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(-2*np.pi,2*np.pi,0.01)
y = np.sin(3*x)/x
plt.plot(x,y)
plt.show()

Output:

3.Random Numbers

Code:
import matplotlib.pyplot as plt
import numpy as np
pop = np.random.randint(0,100,100)
print(pop)

Output:
 
4. Create a Histogram.

Code:
import matplotlib.pyplot as plt
pop = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6]
n,bins,patches = plt.hist(pop,bins=20)
plt.show()
Output:
 
5.Create a Bar Chart

Code:
import matplotlib.pyplot as plt_tuba
index = [0,1,2,3,4]
values = [5,7,3,4,6]
plt_tuba.bar(index,values)
plt_tuba.show()

Output:

6.Create a Horizontal Bar Chart.

Code:
import matplotlib.pyplot as plt
import numpy as np
index = np.arange(5)
values1 = [5,7,3,4,6]
std1 = [0.8,1,0.4,0.9,1.3]
plt.title('A horizontal Bar Chart')
plt.barh(index,values1,xerr=std1,error_kw={'ecolor':'0.1','capsize':6},alpha=0.7,label='First')
plt.show()

Output:
 
7.Multicolor Bar Chart and Multiserial Bar Chart.

Code:
import matplotlib.pyplot as plt
import numpy as np
index = np.arange(5)
values1 = [5,7,3,4,6]
values2 = [6,6,4,5,7]
values3 = [5,6,5,4,6]
bw = 0.3
plt.axis([0,5,0,8])
plt.title("A Multiseries Bar Chart", fontsize = 20)
plt.bar(index, values1, bw, color = 'b')
plt.bar(index + bw, values2, bw, color = 'g')
plt.bar(index + 2 * bw, values3, bw, color = 'r')
plt.xticks(index + 1.5 * bw, ['A','B','C','D','E'])
plt.show()

Output:
 

8.Multi Series Bar Chart with pandas DataFrame.

Code:
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
data = {'series1':[1,3,4,3,5],
        'series2':[2,4,5,2,4],
        'series3':[3,2,3,1,3]}
df = pd.DataFrame(data)
df.plot(kind='bar')
plt.show()

Output:

9.Multi Series Stacked Bar Chart.

Code:
import matplotlib.pyplot as plt
import numpy as np
series1 = np.array([3,4,5,3])
series2 = np.array([1,2,2,5])
series3 = np.array([2,3,3,4])
index = np.arange(4)
plt.axis([0,4,0,15])
plt.bar(index,series1,color='r',label='Series 1')
plt.bar(index,series2,color='b',bottom=series1,label='Series 2')
plt.bar(index,series3,color='g',bottom=(series2+series1),label='Series 3')
plt.xticks(index+0.4,['Jan15','Feb15','Mar15','Apr15'])
plt.legend()
plt.show()

Output:
 

10.PieChart.

Code:
import matplotlib.pyplot as plt
labels = ['Nokia','Samsung','Apple','Lumia']
values = [10,30,45,15]
colors = ['yellow','green','red','blue']
plt.pie(values,labels=labels,colors=colors)
plt.axis('equal')
plt.show()

Output:

11. PieChart2

Code:
import matplotlib.pyplot as plt
labels = ['Nokia','Samsung','Apple','Lumia']
values = [10,30,45,15]
colors = ['yellow','green','red','blue']
explode = [0.3,0,0,0]
plt.title('A pie Chart')
plt.pie(values,labels=labels,colors=colors,explode=explode,startangle=180)
plt.axis('equal')
plt.show()

Output:

